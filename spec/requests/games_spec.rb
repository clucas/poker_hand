 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/games", type: :request do
  
  # Game. As you add validations to Game, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    before :each do
      create :game
    end

    it "renders a successful response" do
      get games_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    let(:game) { create :game, name: 'new_game'}
    let(:player1) { create :player, game: game }
    let(:player2) { create :player, game: game }
    let(:round) { create :round, game: game }
    let!(:hand1) { create :hand, card_list: 'TS 9H AH AD 8S', round: round, player: player1 }
    let!(:hand2) { create :hand, card_list: '9S 3H 9D JD 5C', round: round, player: player2 }
    let!(:win) { create :win, round: round, hand: hand1, status: true, rank: :one_pair }

    it "renders a successful response" do
      get game_url(game)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_game_url
      expect(response).to be_successful
    end
  end
  # post users_video_path(user.id),
  #      params: { video: Rack::Test::UploadedFile.new("#{Rails.root}/spec/support/attachments/test_video.m4v", 'video/m4v') },
  #      headers:  { 'Authorization' =&gt; 'Bearer XXXXXXXXXXXXXXXXXXXXXXXXXXX' }
  # post "/api/v1/logs/create",  log: { name: Foo, "file" => Rack::Test::UploadedFile.new("me.jpg", "image/jpeg") }

  describe "POST /create" do
    let(:line) { 'QS 9C QD 6H JS 5D AC 8D 2S AS' }

    let(:game_file) {
      file = Tempfile.new('game')
      file.write(line)
      file.rewind
      file
    }
    context "with valid parameters" do
      it "creates a new Game" do
        expect {
          post games_url, params: { game: { file: Rack::Test::UploadedFile.new(game_file, "text/plain") } }
        }.to change(Game, :count).by(1)
      end

      it "redirects to the created game" do
        post games_url, params: { game: { file: Rack::Test::UploadedFile.new(game_file, "text/plain") } }
        expect(response).to redirect_to(game_url(Game.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Game" do
        expect {
          post games_url, params: { game: { file: nil } }
        }.to change(Game, :count).by(0)
      end
    end
  end

  describe "DELETE /destroy" do
    let(:game) { create :game, name: 'new_game'}
    let(:player1) { create :player, game: game }
    let(:player2) { create :player, game: game }
    let(:round) { create :round, game: game }
    let!(:hand1) { create :hand, card_list: 'TS 9H AH AD 8S', round: round, player: player1 }
    let!(:hand2) { create :hand, card_list: '9S 3H 9D JD 5C', round: round, player: player2 }

    it "destroys the requested game" do
      expect {
        delete game_url(game)
      }.to change(Game, :count).by(-1)
    end

    it "redirects to the games list" do
      delete game_url(game)
      expect(response).to redirect_to(games_url)
    end
  end
end
